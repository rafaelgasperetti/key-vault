<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AccountService_Create" xml:space="preserve">
    <value>INSERT INTO Account
(
	Name,
	TenantId,
	ClientId,
	ClientSecret
)
VALUES
(
	@Name,
	@TenantId,
	@ClientId,
	@ClientSecret
)</value>
  </data>
  <data name="AccountService_Delete" xml:space="preserve">
    <value>UPDATE Account SET DeletedAt = CURRENT_TIMESTAMP WHERE AccountId = @AccountId AND DeletedAt IS NULL</value>
  </data>
  <data name="AccountService_DeleteAccountSecrets" xml:space="preserve">
    <value>UPDATE SecretKey SET DeletedAt = CURRENT_TIMESTAMP WHERE AccountId = @AccountId AND DeletedAt IS NULL</value>
  </data>
  <data name="AccountService_Get" xml:space="preserve">
    <value>SELECT * FROM Account WHERE AccountId = @AccountId AND DeletedAt IS NULL</value>
  </data>
  <data name="AccountService_UpdateClientSecret" xml:space="preserve">
    <value>UPDATE Account SET ClientSecret = @ClientSecret WHERE AccountId = @AccountId</value>
  </data>
  <data name="ApplicationRunningMessage" xml:space="preserve">
    <value>Application running and healthy with version {0}...</value>
  </data>
  <data name="ApplicationUnhealthyMessage" xml:space="preserve">
    <value>Application is unhealhty with version {0} due to {1}.</value>
  </data>
  <data name="ApplicationUnhealthyPingFailed" xml:space="preserve">
    <value>Application failed to ping MySql host {0}:{1}.</value>
  </data>
  <data name="ConnectionString" xml:space="preserve">
    <value>Server={0};Port={1};User ID={2};Password={3};{4}</value>
  </data>
  <data name="CreateDatabaseString" xml:space="preserve">
    <value>CREATE DATABASE IF NOT EXISTS {0}</value>
  </data>
  <data name="DatabaseName" xml:space="preserve">
    <value>key_vault</value>
  </data>
  <data name="DatabaseScriptFile" xml:space="preserve">
    <value>Properties/Scripts/DatabaseScript.sql</value>
  </data>
  <data name="MySqlWaitingMessage" xml:space="preserve">
    <value>Waiting for MySql to be healthy {0}/{1}... Message: {2}</value>
  </data>
  <data name="MySql_DatabaseNameString" xml:space="preserve">
    <value>Database={0}</value>
  </data>
  <data name="MySql_GetLastInsertedId" xml:space="preserve">
    <value>SELECT LAST_INSERT_ID();</value>
  </data>
  <data name="MySql_UnableToConnectMessage" xml:space="preserve">
    <value>Unable to connect to mysql database "{0}:{1}" in "{2}".</value>
  </data>
  <data name="NullRepresentation" xml:space="preserve">
    <value>&lt;NULL&gt;</value>
  </data>
  <data name="SecretService_Create" xml:space="preserve">
    <value>INSERT INTO SecretKey
(
	AccountId,
	Name,
	Description,
	Version,
	Value
)
VALUES
(
	@AccountId,
	@Name,
	@Description,
	@Version,
	@Value
)</value>
  </data>
  <data name="SecretService_Delete" xml:space="preserve">
    <value>UPDATE SecretKey SET DeletedAt = CURRENT_TIMESTAMP WHERE AccountId = @AccountId AND Name = @Name AND DeletedAt IS NULL</value>
  </data>
  <data name="SecretService_Get" xml:space="preserve">
    <value>SELECT	SecretKey.*
FROM	SecretKey
	INNER JOIN
	(
		SELECT	AccountId,
			Name,
			MAX(SecretKeyId) AS LastId
		FROM	SecretKey
		GROUP BY
			AccountId,
			Name
	) LastVersion
		ON	SecretKey.AccountId = LastVersion.AccountId AND
			SecretKey.Name = LastVersion.Name AND
			SecretKey.SecretKeyId = LastVersion.LastId
WHERE	SecretKey.AccountId = @AccountId AND
	SecretKey.Name = @Name AND
 	SecretKey.DeletedAt IS NULL</value>
  </data>
  <data name="SecretService_GetVersion" xml:space="preserve">
    <value>SELECT	SecretKey.*
FROM	SecretKey
WHERE	AccountId = @AccountId AND Name = @Name AND Version = @Version AND DeletedAt IS NULL</value>
  </data>
  <data name="Service_AccountNotFound" xml:space="preserve">
    <value>Account ID "{0}" not found.</value>
  </data>
  <data name="Service_SecretNotFound" xml:space="preserve">
    <value>Secret "{0}" not found in account "{1}".</value>
  </data>
</root>