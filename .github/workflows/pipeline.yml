# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net
name: .NET Pipeline
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_call:
    secrets:
      MYSQL_USER:
        required: true
      MYSQL_PASSWORD:
        required: true
      SECRET:
        required: true
jobs:
  build-test:
    runs-on: self-hosted
    env:
      DOTNET_INSTALL_DIR: ~/dotnet
    steps:
    - uses: actions/checkout@v3
      with:
        path: ${{github.workspace}}
    - name: Auto set package version from project
      run: |
        version=$(grep -oP '<Version>\K[^<]+' key-vault/key-vault/key-vault.csproj)
        echo "Building version: $version"
        echo "VERSION=$version" >> $GITHUB_ENV
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
        dotnet-root: ${{env.DOTNET_INSTALL_DIR}}
    - name: Set up Docker Compose
      run: |
          apt-get --yes install docker-compose
    - name: Start database and key-vault API
      run: |
         docker-compose -f key-vault/key-vault/Environments/ProdTest/docker-compose.yml -p key-vault-pipe-test-key-vault up -d --build
      env:
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
          SECRET: ${{secrets.SECRET}}
    - name: Run Tests
      run: |
         docker-compose -f key-vault-test/Environments/ProdTest/docker-compose.yml -p key-vault-pipe-test-key-vault-test up -d --build
      env:
          MYSQL_USER: ${{secrets.MYSQL_USER}}
          MYSQL_PASSWORD: ${{secrets.MYSQL_PASSWORD}}
          SECRET: ${{secrets.SECRET}}
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ env.VERSION }}
        tag_name: ${{ env.VERSION }}
        body: Release ${{ env.VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - name: Login to GitHub Container Registry
      run: docker login docker.pkg.github.com -u ${{ github.repository_owner }} -p ${{ secrets.GITHUB_TOKEN }}
    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Update README version
      run: |
          PATTERN="# key-vault (0(\.[0-9]+)*)"
          REPLACEMENT="# key-vaul ${{ env.VERSION }}"
          sed -E -i "s/$PATTERN/$REPLACEMENT/g" README.md
          git config --global user.name ${{ github.event.pusher.name }}
          git config --global user.email ${{ github.event.pusher.email }}
          git add README.md
          git commit -m "Updating README to version ${{ env.VERSION }}"
          git push
    - name: Tag GitHub Container Docker Image
      run: |
          docker tag key-vault:latest docker.pkg.github.com/${{ github.repository }}/key-vault:latest
          docker tag key-vault:latest docker.pkg.github.com/${{ github.repository }}/key-vault:${{ env.VERSION }}
    - name: Push GitHub Container Docker Image
      run: |
          docker push docker.pkg.github.com/${{ github.repository }}/key-vault:latest
          docker push docker.pkg.github.com/${{ github.repository }}/key-vault:${{ env.VERSION }}
    - name: Tag Docker Image
      run: |
          docker tag key-vault:latest ${{ github.repository_owner }}/key-vault:latest
          docker tag key-vault:latest ${{ github.repository_owner }}/key-vault:${{ env.VERSION }}
    - name: Push Docker Image
      run: |
          docker push ${{ github.repository_owner }}/key-vault:latest
          docker push ${{ github.repository_owner }}/key-vault:${{ env.VERSION }}
    - name: Docker change repository description
      run: |
          DESCRIPTION=$(cat README.md)
          docker run -e DOCKERHUB_DESCRIPTION="$DESCRIPTION" ${{ github.repository_owner }}/key-vault:latest
    - name: Tear Down Docker Compose
      run: |
          docker-compose -f key-vault-test/Environments/ProdTest/docker-compose.yml down
          docker-compose -f key-vault/key-vault/Environments/ProdTest/docker-compose.yml down
      if: always()
      timeout-minutes: 10
